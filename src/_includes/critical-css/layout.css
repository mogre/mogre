.stack {
  /* ↓ The flex context */
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-start;
}

.stack > * {
  /* ↓ Any extant vertical margins are removed */
  margin-top: 0;
  margin-bottom: 0;
}

.stack > * + * {
  /* ↓ Top margin is only applied to successive elements */
  margin-top: var(--stack-space);
}

.center {
  /* ↓ Remove padding from the width calculation */
  box-sizing: content-box;
  /* ↓ The maximum width is the maximum measure */
  max-width: var(--width-limit, 60ch);
  /* ↓ Only affect horizontal margins */
  margin-left: auto;
  margin-right: auto;
  /* ↓ Apply the minimum horizontal space */
  padding-left: var(--outer-padding);
  padding-right: var(--outer-padding);
}

.cluster {
  /* ↓ Set the Flexbox context */
  display: flex;
  /* ↓ Enable wrapping */
  flex-wrap: wrap;
  /* ↓ Set the space/gap */
  gap: var(--cluster-gutter);
}

[data-justify="center"] {
  justify-content: center;
}

[data-justify="end"] {
  justify-content: end;
}

[data-align="center"] {
  align-items: center;
}

.with-sidebar {
  display: flex;
  flex-wrap: wrap;
  /* ↓ The default value is the first point on the modular scale */
  gap: var(--sidebar-gutter);
}
.with-sidebar > :first-child {
  /* ↓ The width when the sidebar _is_ a sidebar */
  flex-basis: var(--logo-width, 6.5rem);
  flex-grow: 1;
}
.with-sidebar > :last-child {
  /* ↓ Grow from nothing */
  flex-basis: 0;
  flex-grow: 999;
  /* ↓ Wrap when the elements are of equal width */
  min-width: 20%;
}

.grid {
  display: grid;
  grid-gap: var(--grid-gutter);
}
